#!/usr/bin/env zsh
# Helper function: add password inside a folder (from folder view)

_passfzf_add_folder_password() {
    local pass_dir="$1"
    local folder="$2"
    
    exec < /dev/tty
    echo -n "✏️  Enter new entry name for $folder/: "
    read -r new_name
    
    if [[ -z "$new_name" ]]; then
        echo "❌ Aborted."
        return 1
    fi
    
    if [[ "$new_name" =~ [[:space:]] ]]; then
        echo "❌ Entry name cannot contain spaces. Use underscores or hyphens instead."
        return 1
    fi

    local new_path="$folder/$new_name"
    
    if [[ -f "$pass_dir/$new_path.gpg" ]]; then
        echo "❌ Entry '$new_path' already exists!"
        return 1
    fi

    local tmpfile=$(mktemp -t passfzf-new-XXXXXX)
    cat > "$tmpfile" <<'EOF'
# Enter password on first line. Lines after are optional metadata (notes, username, etc.)
# DO NOT LEAVE FIRST LINE EMPTY.
# Save & quit to continue. Delete all content to cancel.
EOF

    ${EDITOR:-nvim} "$tmpfile"

    if [[ ! -s "$tmpfile" ]] || [[ -z "$(sed '/^#/d; /^$/d; q' "$tmpfile")" ]]; then
        echo "❌ Password cannot be empty. Aborted."
        rm -f "$tmpfile"
        return 1
    fi

    local clean_tmpfile=$(mktemp -t passfzf-clean-XXXXXX)
    grep -v '^#' "$tmpfile" > "$clean_tmpfile"

    if pass insert -m "$new_path" < "$clean_tmpfile" &>/dev/null; then
        echo "✅ Password created successfully: $new_name (in $folder)"
        command -v notify-send >/dev/null 2>&1 && {
            notify-send "🔐 New Password Created" "$new_name" -t 2000 -u low &>/dev/null &
            disown
        }
        echo "🔄 Returning to folder view..."
        rm -f "$tmpfile" "$clean_tmpfile"
        _passfzf_browse_folder "$pass_dir" "$folder"  # Return to the same folder instead of main view
    else
        echo "❌ Failed to create: $new_path"
        rm -f "$tmpfile" "$clean_tmpfile"
        return 1
    fi
}
