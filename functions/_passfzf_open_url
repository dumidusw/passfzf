#!/usr/bin/env zsh
_passfzf_open_url() {
    local entry="$1"
    
    # Get the full password entry content
    local entry_content
    entry_content=$(pass show "$entry" 2>/dev/null)
    [[ -z "$entry_content" ]] && return 1
    
    # Extract URLs (using your working regex + simple cleanup)
    local -a urls
    urls=($(echo "$entry_content" | grep -oE 'https?://[^[:space:]]+' | sed 's/[.,;!?]*$//'))
    [[ ${#urls[@]} -eq 0 ]] && return 1
    
    local selected_url
    if [[ ${#urls[@]} -eq 1 ]]; then
        selected_url="${urls[1]}"
    else
        selected_url=$(printf '%s\n' "${urls[@]}" | fzf --height=10 --reverse --prompt='🌐 URL> ' --header='Select URL')
        [[ -z "$selected_url" ]] && return 1
    fi
    
    # Enhanced lock mechanism with URL and timestamp
    local url_hash=$(echo -n "$selected_url" | sha256sum | cut -d' ' -f1 | cut -c1-16)
    local lock_file="/tmp/passfzf_url_${url_hash}"
    local current_time=$(date +%s)
    
    # Check if this exact URL was recently opened
    if [[ -f "$lock_file" ]]; then
        local lock_time=$(cat "$lock_file" 2>/dev/null || echo "0")
        local time_diff=$((current_time - lock_time))
        if [[ $time_diff -lt 5 ]]; then
            return 0
        fi
    fi
    
    # Create lock file with timestamp
    echo "$current_time" > "$lock_file"
    
    # Clean up old lock files (optional background cleanup)
    (sleep 10; rm -f "$lock_file") &
    
    # Try different URL opening methods
    local opened=false
    
    # Method 1: Try default browser first (respects system settings)
    if command -v xdg-open >/dev/null 2>&1; then
        # Use setsid to completely detach the process
        setsid xdg-open "$selected_url" >/dev/null 2>&1 &
        opened=true
    # Method 2: Fallback to browser-specific commands if xdg-open fails
    elif command -v firefox >/dev/null 2>&1; then
        firefox "$selected_url" >/dev/null 2>&1 &
        opened=true
    elif command -v google-chrome >/dev/null 2>&1; then
        google-chrome "$selected_url" >/dev/null 2>&1 &
        opened=true
    elif command -v chromium >/dev/null 2>&1; then
        chromium "$selected_url" >/dev/null 2>&1 &
        opened=true
    fi
    
    if $opened; then
        disown 2>/dev/null || true
        # Small delay to prevent race conditions
        sleep 0.2
    else
        return 1
    fi
}
