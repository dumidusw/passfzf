# Helper function for browsing specific folders
# Save as functions/_passfzf_browse_folder (no extension)

_passfzf_browse_folder() {
    local pass_dir="$1"
    local folder="$2"
    
    echo "📂 Expanding folder: $folder"
    
    local -a folder_entries=("✨ + Add New Password" "📁 ← Back to categories")
    while IFS= read -r -d '' entry; do
        local clean_entry="${entry%.gpg}"
        folder_entries+=("🔐 $folder/$clean_entry")
    done < <(find "$pass_dir/$folder" -maxdepth 1 -name "*.gpg" -type f -printf '%P\0' 2>/dev/null | sort -z)

    local folder_entry_count=${#folder_entries[@]}
    local folder_height=$((folder_entry_count + 5))
    local terminal_height=$(tput lines)
    local max_usable_height=$((terminal_height - 5))
    [[ $folder_height -lt 15 ]] && folder_height=15
    [[ $folder_height -gt $max_usable_height ]] && folder_height=$max_usable_height

    local folder_delete_script=$(mktemp -t passfzf-folder-delete-XXXXXX.sh)
    cat > "$folder_delete_script" <<'DELEOF'
#!/bin/bash
entry="$1"
exec < /dev/tty
echo "⚠️  DELETE CONFIRMATION"
echo ""
echo "You are about to DELETE:"
echo "  $entry"
echo ""
echo "Type YES to confirm deletion, or anything else to cancel:"
read -r confirm
if [[ "$confirm" == "YES" ]]; then
    echo "Deleting..."
    if pass rm -f "$entry" &>/dev/null; then
        echo "✅ Password deleted successfully"
        command -v notify-send >/dev/null 2>&1 && notify-send "🗑️ Password Deleted" "$entry" -t 2000 -u low &>/dev/null &
    else
        echo "❌ Failed to delete: $entry"
    fi
else
    echo "ℹ️ Deletion cancelled."
fi
read -k1 -s "key?Press any key to continue..."
DELEOF
    chmod +x "$folder_delete_script"

    # Folder reload command emits entries (no pinned actions when query active)
    local folder_reload_cmd='
if [[ -n "$FZF_QUERY" ]]; then
    find "'"$pass_dir/$folder"'" -maxdepth 1 -name "*.gpg" -printf "%P\n" 2>/dev/null \
      | sed "s/\.gpg$//" \
      | sort \
      | sed "s|^|🔐 '"$folder"'/|"
else
    echo "✨ + Add New Password"
    echo "📁 ← Back to categories"
    find "'"$pass_dir/$folder"'" -maxdepth 1 -name "*.gpg" -printf "%P\n" 2>/dev/null \
      | sed "s/\.gpg$//" \
      | sort \
      | sed "s|^|🔐 '"$folder"'/|"
fi'

    # Folder-specific header command (used to update header after deletes/edits)
    local dynamic_folder_header_cmd='
folder_count=$(find "'"$pass_dir/$folder"'" -maxdepth 1 -name "*.gpg" -type f 2>/dev/null | wc -l)
echo "📊 Folder: '"$folder"' — '"$folder_count"' entries
ENTER: copy • Ctrl+Y: copy+stay • Ctrl+E: edit • Ctrl+D: delete • ← Back"'

    local folder_entry_count_actual=$((${#folder_entries[@]} - 2))
    local folder_selection
    folder_selection=$(
        printf '%s\n' "${folder_entries[@]}" | \
        fzf --height ${folder_height} \
            --reverse \
            --prompt="🔑 $folder/ ($folder_entry_count_actual)> " \
            --header='ENTER: copy • Ctrl+Y: copy+stay • Ctrl+E: edit • Ctrl+D: delete • ← Back' \
            --preview='
                case {} in
                    *"Add New Password"*)
                        echo "✨ Create a new password entry in '"$folder"'/"
                        ;;
                    *"← Back"*)
                        echo "🔙 Return to category view"
                        ;;
                    *)
                        entry=$(echo {} | cut -d" " -f2-)
                        pass show "$entry" 2>/dev/null | sed "1s/.*/🔐 [PASSWORD HIDDEN — Press ENTER to copy]/" | head -10
                        ;;
                esac' \
            --preview-window='right:50%' \
            --bind "change:reload($folder_reload_cmd)" \
            --bind 'ctrl-y:execute-silent(
                entry=$(echo {} | cut -d" " -f2-)
                pass show -c "$entry" &>/dev/null && command -v notify-send >/dev/null 2>&1 && notify-send "🔐 Password Copied" "$entry" -t 1500 -u low &>/dev/null
            )+refresh-preview+clear-screen' \
            --bind 'ctrl-e:execute(
                if [[ {} == 📁* || {} == *"Add New Password"* || {} == *"← Back"* ]]; then
                    echo "⚠️  Edit operation not available for this item"
                    read -k1 -s "key?Press any key to continue..."
                else
                    entry=$(echo {} | cut -d" " -f2-)
                    EDITOR=${EDITOR:-nvim} pass edit "$entry"
                fi
            )+reload('"$folder_reload_cmd"')+transform-header('"$dynamic_folder_header_cmd"')' \
            --bind 'ctrl-d:execute(
                if [[ {} == 📁* || {} == *"Add New Password"* || {} == *"← Back"* ]]; then
                    echo "⚠️  Delete operation not available for this item"
                    read -k1 -s "key?Press any key to continue..."
                else
                    entry=$(echo {} | cut -d" " -f2-)
                    '"$folder_delete_script"' "$entry"
                fi
            )+reload('"$folder_reload_cmd"')+transform-header('"$dynamic_folder_header_cmd"')' \
            --bind 'ctrl-n:execute-silent(echo "📁 ← Back to categories")+accept'
    )

    rm -f "$folder_delete_script"

    case "$folder_selection" in
        *"← Back"*)
            passfzf
            ;;
        *"Add New Password"*)
            _passfzf_add_folder_password "$pass_dir" "$folder"
            ;;
        *)
            if [[ -n "$folder_selection" ]]; then
                local real_path="${folder_selection#* }"
                if pass show -c "$real_path" &>/dev/null; then
                    local display_name="${real_path##*/}"
                    echo "🔐 Password copied: $display_name (from $folder)"
                    command -v notify-send >/dev/null 2>&1 && {
                        notify-send "🔐 Password Copied" "$display_name" -t 2000 -u low &>/dev/null &
                        disown
                    }
                    echo "⏳ Will clear from clipboard in 45 seconds"
                else
                    echo "❌ Failed to copy: $real_path"
                fi
            fi
            ;;
    esac
}
